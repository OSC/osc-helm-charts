apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "webservice.name" . }}
  labels:
    {{ include "osc.common.serviceAccount" . }}
    {{- include "webservice.labels" . | nindent 4 }}
  {{- if (include "webservice.alert.receiver" .) }}
    receiver: {{ include "webservice.alert.receiver" . }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "webservice.selectorLabels" . | nindent 6 }}
  replicas: {{ include "webservice.replicas" . | default 1 }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{ include "osc.common.serviceAccount" . }}
        {{- include "webservice.selectorLabels" . | nindent 8 }}
      {{- if (include "webservice.alert.receiver" .) }}
        receiver: {{ include "webservice.alert.receiver" . }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "webservice.name" . }}
      securityContext: {{ toYaml .Values.podSecurityContext | nindent 8 }}
      hostNetwork: false
      hostIPC: false
      hostPID: false
      containers:
      - name: {{ include "webservice.name" . }}
        image: "{{ .Values.image.repository }}:{{ tpl (include "webservice.imageTag" .) . }}"
        {{- if eq (tpl (include "webservice.imageTag" .) .) "latest" }}
        imagePullPolicy: Always
        {{- else }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- end }}
        {{- if .Values.command }}
        command: {{ toYaml .Values.command | nindent 10 }}
        {{- else if (ne .Values.appType "none") }}
        command: {{ index .Values "defaultCommand" .Values.appType | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.args }}
        args:
        {{- range .Values.args }}
        - {{ tpl . $ }}
        {{- end }}
        {{- else if (ne .Values.appType "none") }}
        args:
        {{- range (index .Values "defaultArgs" .Values.appType) }}
        - {{ tpl . $ }}
        {{- end }}
        {{- end }}
        {{- if .Values.workingDir }}
        workingDir: {{ .Values.workingDir }}
        {{- end }}
        {{- if or .Values.env .Values.database.enable .Values.database.mariadb.enable }}
        env:
        {{- if .Values.database.password }}
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "webservice.name" . }}
              key: database-password
        {{- end }}
        {{- if .Values.database.url }}
        - name: DATABASE_URL
          value: {{ tpl .Values.database.url . }}
        {{- end }}
        {{- range $env := .Values.env }}
        - name: {{ $env.name }}
          value: {{ tpl $env.value $ | quote }}
        {{- end }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.service.port }}
          name: http
        {{- if or .Values.data.enable .Values.mounts.data .Values.mounts.home .Values.mounts.roDir .Values.mounts.rwDir .Values.mounts.socket .Values.mounts.roFile }}
        volumeMounts:
        {{- if .Values.data.enable }}
          - name: data
            mountPath: {{ $.Values.data.path }}
        {{- end }}
        {{- if .Values.mounts.data }}
          - name: {{ .Values.mounts.data.name }}
            mountPath: {{ tpl .Values.mounts.data.mountPath . }}
        {{- end }}
        {{- if .Values.mounts.home }}
          - name: home
            mountPath: {{ tpl .Values.mounts.home . }}
        {{- end }}
        {{- range $name, $path := .Values.mounts.roDir }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: true
        {{- end }}
        {{- range $name, $path := .Values.mounts.rwDir }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: false
        {{- end }}
        {{- range $name, $path := .Values.mounts.socket }}
          - name: {{ $name }}
            mountPath: {{ $path }}
        {{- end }}
        {{- range $name, $path := .Values.mounts.roFile }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: true
        {{- end }}
        {{- end }}
        {{- $probeType := "httpGet" }}
        {{- if index .Values.probes.typeDefaults .Values.appType }}
          {{- $probeType = (index .Values.probes.typeDefaults .Values.appType) }}
        {{- else if .Values.probes.type }}
          {{- $probeType = .Values.probes.type }}
        {{- end }}
        startupProbe:
          {{ $probeType }}: {{ toYaml (index .Values.startupProbe $probeType) | nindent 12 }}
          {{- omit .Values.startupProbe "httpGet" "tcpSocket" | toYaml | nindent 10 }}
        livenessProbe:
          {{ $probeType }}: {{ toYaml (index .Values.startupProbe $probeType) | nindent 12 }}
          {{- omit .Values.startupProbe "httpGet" "tcpSocket" | toYaml | nindent 10 }}
        readinessProbe:
          {{ $probeType }}: {{ toYaml (index .Values.startupProbe $probeType) | nindent 12 }}
          {{- omit .Values.startupProbe "httpGet" "tcpSocket" | toYaml | nindent 10 }}
  {{- $podResources := .Values.podResources}}
  {{- if .Values.global.env }}
    {{- if (index .Values.global.env (include "osc.common.environment" .)) }}
      {{- if (index .Values.global.env (include "osc.common.environment" .) "podResources") }}
        {{- $podResources = (index .Values.global.env (include "osc.common.environment" .) "podResources") }}
      {{- end }}
    {{- end }}
  {{- end }}
        resources: {{ toYaml $podResources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
          privileged: false
    {{- if .Values.initContainers }}
      initContainers:
    {{- range $init := .Values.initContainers }}
      - name: {{ $init.name }}
        {{- $initImage := "" }}
        {{- if $init.image }}
        {{- $initImage = printf "%s:%s" $init.image.repository $init.image.tag -}}
        {{- else }}
        {{- $initImage = printf "%s:%s" $.Values.image.repository (tpl (include "webservice.imageTag" $) $) -}}
        {{- end }}
        image: {{ $initImage }}
        {{- if contains ":latest" $initImage }}
        imagePullPolicy: Always
        {{- else if $init.image }}
        imagePullPolicy: {{ $init.image.pullPolicy }}
        {{- else }}
        imagePullPolicy: IfNotPresent
        {{- end }}
        command:
        {{- range $init.command }}
        - {{ tpl . $ }}
        {{- end }}
        {{- if $init.args }}
        args:
        {{- range $init.args }}
        - {{ tpl . $ }}
        {{- end }}
        {{- end }}
        {{- if or $init.env $.Values.database.enable $.Values.database.mariadb.enable }}
        env:
        {{- if $.Values.database.password }}
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "webservice.name" $ }}
              key: database-password
        {{- end }}
        {{- if $.Values.database.url }}
        - name: DATABASE_URL
          value: {{ tpl $.Values.database.url $ | quote }}
        {{- end }}
        {{- range $initEnv := $init.env }}
        - name: {{ $initEnv.name }}
          value: {{ tpl $initEnv.value $ | quote }}
        {{- end }}
        {{- end }}
        {{- if or $.Values.data.enable $.Values.mounts.data $.Values.mounts.home $.Values.mounts.roDir $.Values.mounts.rwDir $.Values.mounts.socket $.Values.mounts.roFile }}
        volumeMounts:
        {{- if $.Values.data.enable }}
          - name: data
            mountPath: {{ $.Values.data.path }}
        {{- end }}
        {{- if $.Values.mounts.data }}
          - name: data
            mountPath: {{ tpl $.Values.mounts.data.mountPath $ }}
        {{- end }}
        {{- if $.Values.mounts.home }}
          - name: home
            mountPath: {{ tpl $.Values.mounts.home $ }}
        {{- end }}
        {{- range $name, $path := $.Values.mounts.roDir }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: true
        {{- end }}
        {{- range $name, $path := $.Values.mounts.rwDir }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: false
        {{- end }}
        {{- range $name, $path := $.Values.mounts.socket }}
          - name: {{ $name }}
            mountPath: {{ $path }}
        {{- end }}
        {{- range $name, $path := $.Values.mounts.roFile }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: true
        {{- end }}
        {{- end }}
        {{- if $init.mounts }}
        {{- if or $init.mounts.data $init.mounts.home $init.mounts.roDir $init.mounts.rwDir $init.mounts.socket $init.mounts.roFile }}
        {{- if $init.mounts.data }}
          - name: {{ $init.mounts.data.name }}
            mountPath: {{ tpl $init.mounts.data.mountPath $ }}
        {{- end }}
        {{- if $init.mounts.home }}
          - name: home
            mountPath: {{ tpl $init.mounts.home $ }}
        {{- end }}
        {{- range $name, $path := $init.mounts.roDir }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: true
        {{- end }}
        {{- range $name, $path := $init.mounts.rwDir }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: false
        {{- end }}
        {{- range $name, $path := $init.mounts.socket }}
          - name: {{ $name }}
            mountPath: {{ $path }}
        {{- end }}
        {{- range $name, $path := $init.mounts.roFile }}
          - name: {{ $name }}
            mountPath: {{ $path }}
            readOnly: true
        {{- end }}
        {{- end }}
        {{- end }}
        resources: {{ toYaml (default $.Values.init.podResources $init.podResources) | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
          privileged: false
    {{- end }}
    {{- end }}
      nodeSelector:
        {{ include "osc.common.nodeSelectorRole" . }}
      {{- with .Values.nodeSelector }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.data.enable .Values.mounts.data .Values.mounts.home .Values.mounts.roDir .Values.mounts.rwDir .Values.mounts.socket .Values.mounts.roFile }}
      volumes:
        {{- if .Values.data.enable }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "webservice.data.name" . }}
        {{- end }}
        {{- if .Values.mounts.data }}
        - name: {{ .Values.mounts.data.name }}
          hostPath:
            path: {{ tpl .Values.mounts.data.hostPath . }}
            type: {{ .Values.mounts.data.type | default "Directory" }}
        {{- end }}
        {{- if .Values.mounts.home }}
        - name: home
          hostPath:
            path: {{ tpl .Values.mounts.home . }}
            type: Directory
        {{- end }}
        {{- range $name, $path := .Values.mounts.roDir }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: Directory
        {{- end }}
        {{- range $name, $path := .Values.mounts.rwDir }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: Directory
        {{- end }}
        {{- range $name, $path := .Values.mounts.socket }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: Socket
        {{- end }}
        {{- range $name, $path := .Values.mounts.roFile }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: File
        {{- end }}
      {{- end }}
      {{- range $init := .Values.initContainers }}
      {{- if $init.mounts }}
        {{- if $init.mounts.data }}
        - name: {{ $init.mounts.data.name }}
          hostPath:
            path: {{ tpl $init.mounts.data.hostPath . }}
            type: {{ $init.mounts.data.type | default "Directory" }}
        {{- end }}
        {{- if $init.mounts.home }}
        - name: home
          hostPath:
            path: {{ tpl $init.mounts.home . }}
            type: Directory
        {{- end }}
        {{- range $name, $path := $init.mounts.roDir }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: Directory
        {{- end }}
        {{- range $name, $path := $init.mounts.rwDir }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: Directory
        {{- end }}
        {{- range $name, $path := $init.mounts.socket }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: Socket
        {{- end }}
        {{- range $name, $path := $init.mounts.roFile }}
        - name: {{ $name }}
          hostPath:
            path: {{ $path }}
            type: File
        {{- end }}
      {{- end }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ include "webservice.name" . }}
              topologyKey: kubernetes.io/hostname
