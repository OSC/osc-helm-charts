# Default values for prometheus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: docker.io/prom/prometheus
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - all
  privileged: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534

service:
  type: ClusterIP
  port: 9090
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /metrics
    prometheus.io/probe_module: http-healthz
    prometheus.io/probe_path: /-/healthy

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

dnsDomain: cluster.local

config:
  name: prometheus.yaml

watch:
  image:
    repository: weaveworks/watch
    tag: master-5fc29a9
    pullPolicy: IfNotPresent
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - all
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 50Mi

proxy:
  oidcIssuerURL:
  clientID:
  clientSecret:
  cookieSecret:
  cookieName:
  allowGroups:
  name: prometheus-proxy
  image:
    repository: quay.io/oauth2-proxy/oauth2-proxy
    pullPolicy: IfNotPresent
    tag: "v7.0.1"
  securityContext: {}
  resources: {}
  service:
    type: ClusterIP
    port: 4180
    annotations:
      prometheus.io/probe_module: http-healthz
      prometheus.io/probe_path: /ping
  ingress:
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
      cert-manager.io/cluster-issuer: letsencrypt
      prometheus.io/probe_path: /ping
      # nginx.ingress.kubernetes.io/server-alias set by hostAlias
    host: prometheus-proxy.local
    hostAlias:


blackboxExporter:
  name: blackbox-exporter
  configName: blackbox-exporter-config
  image:
    repository: docker.io/prom/blackbox-exporter
    pullPolicy: IfNotPresent
    tag: "v0.18.0"
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - all
      # Need the following if enable ICMP module
      # add:
      # - NET_RAW
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 50Mi
  service:
    type: ClusterIP
    port: 9115
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path: /metrics

sslExporter:
  name: ssl-exporter
  image:
    repository: docker.io/ribbybibby/ssl-exporter
    pullPolicy: IfNotPresent
    tag: "v2.2.0"
  service:
    type: ClusterIP
    port: 9219

ingressName: ingress-nginx

kubeStateMetrics:
  name: kube-state-metrics
  namespace: kube-system
  metricsPort: 8080
  telemetryPort: 8081

replicaCount: 1

nodeSelector:
  kubernetes.io/os: linux
