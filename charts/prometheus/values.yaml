# Default values for prometheus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  imagePullSecret:
    name: osc-registry
    registry: docker-registry.osc.edu
    username: robot$osc-read
    password:

image:
  repository: quay.io/prometheus/prometheus
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 94

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault
  privileged: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 94
  runAsGroup: 94

service:
  type: ClusterIP
  port: 9090
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /metrics
    prometheus.io/probe_module: http-healthz
    prometheus.io/probe_path: /-/healthy

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

dnsDomain: cluster.local

config:
  name: prometheus.yaml

storageClassName:

watch:
  image:
    repository: docker-registry.osc.edu/kubernetes/weaveworks/watch
    tag: master-5fc29a9
    pullPolicy: IfNotPresent
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 94
    runAsGroup: 94
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 50Mi

proxy:
  oidcIssuerURL:
  clientID:
  clientSecret:
  cookieSecret:
  cookieName:
  allowGroups:
  name: prometheus-proxy
  image:
    repository: quay.io/oauth2-proxy/oauth2-proxy
    pullPolicy: IfNotPresent
    tag: "v7.4.0"
  securityContext: {}
  resources: {}
  service:
    type: ClusterIP
    port: 4180
    annotations:
      prometheus.io/probe_module: http-healthz
      prometheus.io/probe_path: /ping
  metricsService:
    type: ClusterIP
    port: 8080
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path: /metrics
  ingress:
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
      cert-manager.io/cluster-issuer: letsencrypt
      prometheus.io/probe_path: /ping
      # nginx.ingress.kubernetes.io/server-alias set by hostAlias
    host: prometheus-proxy.local
    hostAlias:


blackboxExporter:
  name: blackbox-exporter
  configName: blackbox-exporter-config
  image:
    repository: quay.io/prometheus/blackbox-exporter
    pullPolicy: IfNotPresent
    tag: "v0.24.0"
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      # Need the following if enable ICMP module
      # add:
      # - NET_RAW
    seccompProfile:
      type: RuntimeDefault
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 50Mi
  service:
    type: ClusterIP
    port: 9115
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path: /metrics

sslExporter:
  name: ssl-exporter
  configName: ssl-exporter-config
  rbac:
    create: false
  image:
    repository: docker-registry.osc.edu/kubernetes/ribbybibby/ssl-exporter
    pullPolicy: IfNotPresent
    tag: "2.4.2"
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 50Mi
  service:
    type: ClusterIP
    port: 9219
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path: /metrics

ingressName: ingress-nginx
namespaceReaper: k8-namespace-reaper

kube-state-metrics:
  nameOverride: kube-state-metrics
  fullnameOverride: kube-state-metrics
  prometheusScrape: false
  service:
    annotations:
      prometheus.io/probe_skip: "true"
  collectors: []
  selfMonitor:
    enabled: true
    telemetryPort: 8081
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
    privileged: false
    runAsNonRoot: true

dcgm-exporter:
  nameOverride: dcgm-exporter
  fullnameOverride: dcgm-exporter
  image:
    repository: docker-registry.osc.edu/osc/dcgm-exporter
    tag: 4.4.1-4.6.0-ubuntu22.04
  imagePullSecrets:
    - osc-registry
  arguments:
    - --no-hostname
  extraEnv:
    - name: "__DCGM_DBG_LVL"
      value: "NONE"
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9400'
  service:
    enable: false
    port: 9400
  serviceMonitor:
    enabled: false
  resources:
    limits:
      cpu: '1'
      memory: '256Mi'
    requests:
      cpu: '0.5'
      memory: '128Mi'
  nodeSelector:
    feature.node.kubernetes.io/pci-10de.present: "true"

replicaCount: 1

nodeSelector:
  kubernetes.io/os: linux
