apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pod-service-account-validation
spec:
  background: false
  validationFailureAction: enforce
  rules:
  - name: pods-require-service-account
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    validate:
      message: "Webservice pods must include a service account for access"
      pattern:
        metadata:
          labels:
            osc.edu/service-account: "*?"
  - name: pods-require-valid-service-account-uid
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{`{{ request.operation }}`}}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{`{{ request.object.metadata.labels.\"osc.edu/service-account\" }}`}}"
      operator: NotEquals
      value: ""
    context:
    - name: uidMap
      configMap:
        name: user-uid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid service account UID specified in fields
        spec.securityContext.runAsUser or spec.containers[*].securityContext.runAsUser or
        spec.initContainers[*].securityContext.runAsUser
      anyPattern:
      - spec:
          securityContext:
            runAsUser: "{{`{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
          =(initContainers):
            - =(securityContext):
                =(runAsUser): "{{`{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
          containers:
            - =(securityContext):
                =(runAsUser): "{{`{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
      - spec:
          =(initContainers):
            - securityContext:
                runAsUser: "{{`{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
          containers:
            - securityContext:
                runAsUser: "{{`{{ uidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
  - name: pods-require-valid-service-account-gid
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{`{{ request.operation }}`}}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{`{{ request.object.metadata.labels.\"osc.edu/service-account\" }}`}}"
      operator: NotEquals
      value: ""
    context:
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid service account GID specified in fields
        spec.securityContext.runAsGroup or spec.containers[*].securityContext.runAsGroup or
        spec.initContainers[*].securityContext.runAsGroup
      anyPattern:
      - spec:
          securityContext:
            runAsGroup: "{{`{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
          =(initContainers):
            - =(securityContext):
                =(runAsGroup): "{{`{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
          containers:
            - =(securityContext):
                =(runAsGroup): "{{`{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
      - spec:
          =(initContainers):
            - securityContext:
                runAsGroup: "{{`{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
          containers:
            - securityContext:
                runAsGroup: "{{`{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
  - name: fsgroup-require-valid-service-account-gid
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{`{{ request.operation }}`}}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{`{{ request.object.metadata.labels.\"osc.edu/service-account\" }}`}}"
      operator: NotEquals
      value: ""
    context:
    - name: gidMap
      configMap:
        name: user-gid-map
        namespace: k8-ldap-configmap
    validate:
      message: >-
        Invalid service account GID specified in fields spec.securityContext.fsGroup
      pattern:
        spec:
          securityContext:
            fsGroup: "{{`{{ gidMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
  - name: pods-service-account-authorized-for-groups
    match:
      any:
        - resources:
            kinds:
            - Pod
            namespaceSelector:
              matchExpressions:
              - key: osc.edu/role
                operator: In
                values:
                - webservice
    preconditions:
    - key: "{{`{{ request.operation }}`}}"
      operator: In
      value: ["CREATE","UPDATE"]
    - key: "{{`{{ request.object.metadata.labels.\"osc.edu/service-account\" }}`}}"
      operator: NotEquals
      value: ""
    - key: "{{`{{ (request.object.spec.securityContext.supplementalGroups || '').length(@) }}`}}"
      operator: GreaterThan
      value: 0
    context:
    - name: userGIDMap
      configMap:
        name: user-gids-map
        namespace: k8-ldap-configmap
    validate:
      message: "{{`{{ request.object.metadata.namespace }}`}} not authorized to use those supplemental groups"
      deny:
        conditions:
        - key: "{{`{{ request.object.spec.securityContext.supplementalGroups[*].to_string(@) }}`}}"
          operator: NotIn
          value: "{{`{{ userGIDMap.data.\"user-{{ request.object.metadata.labels.\"osc.edu/service-account\" }}\" }}`}}"
